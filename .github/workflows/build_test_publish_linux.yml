name: build_test_publish_linux
on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
  release:
    types: [created]
  schedule:
    - cron:  '0 12 * * *'
jobs:
  build_test_publish_linux:
    name: ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["pypy-3.8",
                         "pypy-3.7",
                         "pypy-3.6",
                         "3.10",
                         "3.9",
                         "3.8",
                         "3.7",
                         "3.6"]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Setup py-${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
      # Caching improves build time, we use pythonLocation to cache everything including wheels to avoid building
      # wheels at each build (pandas/Pypy is extremely time consuming)
      # sed replacement is performed to rectify PyPy path which ends with /bin
      # cache key takes into account the Python version of the runner to avoid version mismatch on updates.
    - name: Get pip cache path
      id: get-pip-path
      run: |
        id=$(echo ${{ env.pythonLocation }} | sed 's/\/bin//g')
        echo "::set-output name=id::$id"

    - name: Pip cache
      uses: actions/cache@v2
      id: pip-cache
      with:
        path: ${{ steps.get-pip-path.outputs.id }}
        key: ${{ steps.get-pip-path.outputs.id }}-${{ hashFiles('setup.py') }}-${{ hashFiles('dev_requirements.txt') }}

    - name: Install prerequisites
      run: |
        sudo apt-get update
        sudo apt-get install autoconf automake libtool pkg-config gettext libjson-c-dev
        sudo apt-get install libusb-1.0-0-dev libdbus-glib-1-dev libbluetooth-dev libnl-genl-3-dev flex bison

    - name: Install requirements
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r dev_requirements.txt

    - name: Prepare
      run: |
        python prepare.py

    - name: Build
      run: |
        python -m pip install .
        python -m pip wheel --no-deps --wheel-dir=dist .

    - name: Upload generated wheel
      uses: actions/upload-artifact@v3
      with:
        name: generated_wheel
        path: |
          dist/nfstream-*.whl
        retention-days: 1

    - name: Test and generate coverage report
      run: |
        python -m coverage run -m unittest tests.py
        python -m coverage combine

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1

    - name: Publish on Pypi
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: twine upload --skip-existing dist/nfstream-*.whl
